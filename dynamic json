Best Approach for Dynamic UI Elements

Since you want all UI elements to be fully dynamic and they can appear in any key of the content, we need a system that:
âœ” Reads configuration from a JSON or JS file
âœ” Dynamically renders different components based on the type
âœ” Supports elements in any key of the content

ðŸ“Œ Should We Use .json or .js for Data?
	â€¢	Use .js (recommended) if you need functions (e.g., event handlers) or comments inside your data file.
	â€¢	Use .json if the data is static and wonâ€™t change dynamically in the frontend.

For full flexibility, letâ€™s use a .js file (config.js) instead of a .json file.

ðŸ”¹ 1. Dynamic Configuration (config.js)

const config = {
  tabs: [
    {
      id: "tab1",
      name: "Tab 1",
      content: [
        {
          key: "facilityID",
          label: "Facility ID",
          type: "text", // Plain text
          value: "000000111000000010000215"
        },
        {
          key: "obligorName",
          label: "Obligor Name",
          type: "text",
          value: "TURNER HILL PARTNERS LLC"
        },
        {
          key: "actionButton",
          label: "Actions",
          type: "button",
          buttonLabel: "Click Me",
          onClickId: "facilityID"
        },
        {
          key: "selection",
          label: "Select an Option",
          type: "dropdown",
          options: ["Option 1", "Option 2", "Option 3"],
          default: "Option 1"
        },
        {
          key: "userInput",
          label: "User Input",
          type: "input",
          placeholder: "Enter text",
          default: "Default Value"
        }
      ]
    }
  ]
};

export default config;

ðŸ”¹ 2. Dynamic UI Renderer (DynamicRenderer.js)

This component reads the configuration and renders the UI dynamically.

import React, { useState } from "react";
import Select from "react-select";

const DynamicRenderer = ({ field }) => {
  const [inputValue, setInputValue] = useState(field.default || "");
  const [selectedOption, setSelectedOption] = useState(field.default || "");

  const handleClick = () => {
    alert(`Button clicked: ${field.onClickId}`);
  };

  switch (field.type) {
    case "text":
      return <span>{field.value}</span>;

    case "button":
      return <button onClick={handleClick}>{field.buttonLabel}</button>;

    case "dropdown":
      return (
        <Select
          options={field.options.map((opt) => ({ label: opt, value: opt }))}
          defaultValue={{ label: field.default, value: field.default }}
          onChange={(selected) => setSelectedOption(selected.value)}
        />
      );

    case "input":
      return (
        <input
          type="text"
          placeholder={field.placeholder}
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
        />
      );

    default:
      return <span>Unsupported Type</span>;
  }
};

export default DynamicRenderer;

ðŸ”¹ 3. Dynamic Tab Content (TabContent.js)

import React from "react";
import DynamicRenderer from "./DynamicRenderer";

const TabContent = ({ content }) => {
  if (!content || content.length === 0) {
    return <div>Select a tab to view its content.</div>;
  }

  return (
    <div style={{ border: "1px solid black", padding: "20px" }}>
      <table style={{ width: "100%", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th style={{ border: "1px solid black", padding: "8px" }}>Label</th>
            <th style={{ border: "1px solid black", padding: "8px" }}>Value</th>
          </tr>
        </thead>
        <tbody>
          {content.map((field, index) => (
            <tr key={index}>
              <td style={{ border: "1px solid black", padding: "8px" }}>{field.label}</td>
              <td style={{ border: "1px solid black", padding: "8px" }}>
                <DynamicRenderer field={field} />
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TabContent;

ðŸ”¹ 4. Main App with Tabs (App.js)

import React, { useState } from "react";
import config from "./config";
import TabContent from "./TabContent";

const App = () => {
  const [activeTab, setActiveTab] = useState(config.tabs[0].id);

  return (
    <div>
      <h1>Dynamic UI</h1>
      {/* Tabs */}
      <div>
        {config.tabs.map((tab) => (
          <button key={tab.id} onClick={() => setActiveTab(tab.id)}>
            {tab.name}
          </button>
        ))}
      </div>

      {/* Content */}
      {config.tabs.map((tab) =>
        tab.id === activeTab ? <TabContent key={tab.id} content={tab.content} /> : null
      )}
    </div>
  );
};

export default App;

âœ… Final Output

Label	Value
Facility ID	000000111000000010000215
Obligor Name	TURNER HILL PARTNERS LLC
Actions	[Click Me] (Button)
Select an Option	[Dropdown]
User Input	[Text Input]

ðŸŽ¯ Why Is This the Best Approach?

âœ” Fully Dynamic: UI is generated from a config file.
âœ” Expandable: Add new elements without modifying React components.
âœ” Supports Any Key: Works for all fields in the content.
âœ” Secure & Maintainable: No HTML injection risks.

Would you like to extend this to support checkboxes, date pickers, or modals? Let me know! ðŸš€