To implement the described application, we will use React for the frontend. Below is a step-by-step approach to achieve this:

Features
	1.	UI Layout:
	•	Eight tabs displayed in a horizontal row.
	•	Clicking on a tab opens its respective content.
	•	A default admin panel button at the top, which navigates to the admin configuration page.
	2.	Admin Panel:
	•	Allows modifications to tabs and controls.
	•	Enables the addition or deletion of tabs.
	•	Uses JSON-based configuration for flexibility.
	3.	Dynamic Configuration:
	•	All tab content and controls are driven by a JSON configuration file, making the app scalable and customizable.

Project Setup
	1.	Create a new React app:

npx create-react-app tab-management-app
cd tab-management-app
npm start


	2.	Install required libraries:

npm install react-router-dom

Folder Structure

src/
  components/
    Tabs.js
    TabContent.js
    AdminPanel.js
  data/
    config.json
  App.js
  index.js

JSON Configuration (src/data/config.json)

{
  "tabs": [
    { "id": 1, "name": "Tab 1", "content": "This is Tab 1 content." },
    { "id": 2, "name": "Tab 2", "content": "This is Tab 2 content." },
    { "id": 3, "name": "Tab 3", "content": "This is Tab 3 content." },
    { "id": 4, "name": "Tab 4", "content": "This is Tab 4 content." },
    { "id": 5, "name": "Tab 5", "content": "This is Tab 5 content." },
    { "id": 6, "name": "Tab 6", "content": "This is Tab 6 content." },
    { "id": 7, "name": "Tab 7", "content": "This is Tab 7 content." },
    { "id": 8, "name": "Tab 8", "content": "This is Tab 8 content." }
  ]
}

Main Code Implementation

App.js

import React from "react";
import { BrowserRouter as Router, Route, Routes } from "react-router-dom";
import Tabs from "./components/Tabs";
import AdminPanel from "./components/AdminPanel";

function App() {
  return (
    <Router>
      <div>
        <header>
          <button
            onClick={() => (window.location.href = "/admin")}
            style={{ margin: "10px", padding: "10px" }}
          >
            Admin Panel
          </button>
        </header>
        <Routes>
          <Route path="/" element={<Tabs />} />
          <Route path="/admin" element={<AdminPanel />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;

Tabs.js

import React, { useState, useEffect } from "react";
import TabContent from "./TabContent";
import configData from "../data/config.json";

const Tabs = () => {
  const [tabs, setTabs] = useState([]);
  const [activeTab, setActiveTab] = useState(1);

  useEffect(() => {
    setTabs(configData.tabs);
  }, []);

  return (
    <div>
      <div style={{ display: "flex", marginBottom: "20px" }}>
        {tabs.map((tab) => (
          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            style={{
              padding: "10px",
              marginRight: "5px",
              backgroundColor: activeTab === tab.id ? "blue" : "gray",
              color: "white",
            }}
          >
            {tab.name}
          </button>
        ))}
      </div>
      <TabContent content={tabs.find((tab) => tab.id === activeTab)?.content} />
    </div>
  );
};

export default Tabs;

TabContent.js

import React from "react";

const TabContent = ({ content }) => {
  return (
    <div style={{ border: "1px solid black", padding: "20px" }}>
      {content || "Select a tab to view its content."}
    </div>
  );
};

export default TabContent;

AdminPanel.js

import React, { useState } from "react";
import configData from "../data/config.json";

const AdminPanel = () => {
  const [tabs, setTabs] = useState(configData.tabs);
  const [newTab, setNewTab] = useState({ name: "", content: "" });

  const addTab = () => {
    const updatedTabs = [
      ...tabs,
      { id: tabs.length + 1, name: newTab.name, content: newTab.content },
    ];
    setTabs(updatedTabs);
    setNewTab({ name: "", content: "" });
  };

  const deleteTab = (id) => {
    const updatedTabs = tabs.filter((tab) => tab.id !== id);
    setTabs(updatedTabs);
  };

  return (
    <div>
      <h2>Admin Panel</h2>
      <div>
        <h3>Existing Tabs</h3>
        {tabs.map((tab) => (
          <div key={tab.id} style={{ marginBottom: "10px" }}>
            <span>{tab.name}</span>
            <button
              onClick={() => deleteTab(tab.id)}
              style={{ marginLeft: "10px", color: "red" }}
            >
              Delete
            </button>
          </div>
        ))}
      </div>
      <div>
        <h3>Add New Tab</h3>
        <input
          type="text"
          placeholder="Tab Name"
          value={newTab.name}
          onChange={(e) => setNewTab({ ...newTab, name: e.target.value })}
        />
        <input
          type="text"
          placeholder="Tab Content"
          value={newTab.content}
          onChange={(e) => setNewTab({ ...newTab, content: e.target.value })}
        />
        <button onClick={addTab}>Add Tab</button>
      </div>
    </div>
  );
};

export default AdminPanel;

Explanation
	1.	Dynamic Tabs:
	•	Tabs and their content are rendered based on config.json.
	•	Clicking a tab updates the active tab state, displaying its respective content.
	2.	Admin Panel:
	•	Allows adding new tabs or deleting existing ones.
	•	Tabs are managed in a local state for simplicity (can be extended to persist changes in config.json).
	3.	Routing:
	•	Used react-router-dom for navigation between the main UI and the Admin Panel.

Running the Application
	1.	Start the app:

npm start


	2.	Access the tabs view at http://localhost:3000.
	3.	Access the admin panel at http://localhost:3000/admin.





To include content like the one shown in the image you shared, we can enhance the TabContent component to display data in a structured table format. Additionally, we’ll adjust the config.json to include more complex data representing the table rows and columns.

Updated JSON Configuration (src/data/config.json)

Here is an example that matches the table structure you shared:

{
  "tabs": [
    {
      "id": 1,
      "name": "Tab 1",
      "content": [
        {
          "dataElements": "Facility ID",
          "prevQuarter": "000000111000000010000215",
          "currentQuarter": "000000111000000010000215",
          "message": "Reasonableness Tests successful"
        },
        {
          "dataElements": "Obligor Name",
          "prevQuarter": "TURNER HILL PARTNERS LLC",
          "currentQuarter": "TURNER HILL PA",
          "message": "Reasonableness Tests successful"
        },
        {
          "dataElements": "10 Dot Hierarchy",
          "prevQuarter": "JMEFA",
          "currentQuarter": "JMEFA",
          "message": "Reasonableness Tests successful"
        }
      ]
    },
    {
      "id": 2,
      "name": "Tab 2",
      "content": [
        {
          "dataElements": "Source System",
          "prevQuarter": "LIQ",
          "currentQuarter": "LIQ",
          "message": "Reasonableness Tests successful"
        },
        {
          "dataElements": "Report Status",
          "prevQuarter": "Existing",
          "currentQuarter": "Existing",
          "message": "Reasonableness Tests successful"
        }
      ]
    },
    {
      "id": 3,
      "name": "Tab 3",
      "content": [
        {
          "dataElements": "Global Customer Identifier (GCI)",
          "prevQuarter": "325200012",
          "currentQuarter": "325200012",
          "message": "Reasonableness Tests successful"
        }
      ]
    }
  ]
}

Updated TabContent.js

Here, we’ll dynamically render the table based on the content provided in the JSON.

import React from "react";

const TabContent = ({ content }) => {
  if (!content || content.length === 0) {
    return <div>Select a tab to view its content.</div>;
  }

  return (
    <div style={{ border: "1px solid black", padding: "20px" }}>
      <table style={{ width: "100%", borderCollapse: "collapse" }}>
        <thead>
          <tr>
            <th style={{ border: "1px solid black", padding: "8px" }}>Data Elements</th>
            <th style={{ border: "1px solid black", padding: "8px" }}>Prev Quarter</th>
            <th style={{ border: "1px solid black", padding: "8px" }}>Current Quarter</th>
            <th style={{ border: "1px solid black", padding: "8px" }}>Message</th>
          </tr>
        </thead>
        <tbody>
          {content.map((row, index) => (
            <tr key={index}>
              <td style={{ border: "1px solid black", padding: "8px" }}>{row.dataElements}</td>
              <td style={{ border: "1px solid black", padding: "8px" }}>{row.prevQuarter}</td>
              <td style={{ border: "1px solid black", padding: "8px" }}>{row.currentQuarter}</td>
              <td style={{ border: "1px solid black", padding: "8px" }}>{row.message}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default TabContent;

Explanation of Changes
	1.	Dynamic Table Rendering:
	•	The content of each tab is now an array of objects.
	•	Each object represents a row in the table with keys for dataElements, prevQuarter, currentQuarter, and message.
	2.	Table Layout:
	•	The TabContent component dynamically generates a table, rendering the header and rows based on the data.
	3.	CSS Styling:
	•	Added basic inline CSS for table borders and padding to match the format shown in the image.

Output for Each Tab
	•	Tab 1: Displays 3 rows of data with details for “Facility ID,” “Obligor Name,” and “10 Dot Hierarchy.”
	•	Tab 2: Displays 2 rows of data with details for “Source System” and “Report Status.”
	•	Tab 3: Displays a single row with details for “Global Customer Identifier (GCI).”

Updated Workflow
	1.	Open the app in your browser.
	2.	Click on a tab to display its respective table content.
	3.	Navigate to the Admin Panel to update the configuration as needed.

With this setup, the content for each tab is dynamic, matching the table-like structure shown in your attachment.
This setup provides a flexible and scalable React-based application to meet your requirements!