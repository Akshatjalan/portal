UI CHUNKS 

const uploadFileInChunks = async (file, networkUserId, useruid) => {
  const chunkSize = 1 * 1024 * 1024; // 1MB per chunk
  const totalChunks = Math.ceil(file.size / chunkSize);

  for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
    const start = chunkIndex * chunkSize;
    const end = Math.min(start + chunkSize, file.size);
    const chunk = file.slice(start, end);

    const formData = new FormData();
    formData.append("file", chunk);
    formData.append("chunkIndex", chunkIndex);
    formData.append("totalChunks", totalChunks);
    formData.append("networkUserId", networkUserId);
    formData.append("useruid", useruid);

    const url = `${process.env.API_URL}/upload-chunk`;

    try {
      const response = await fetch(url, {
        method: "POST",
        body: formData,
      });

      if (!response.ok) {
        throw new Error(`Failed to upload chunk ${chunkIndex}`);
      }

      console.log(`Uploaded chunk ${chunkIndex + 1} of ${totalChunks}`);
    } catch (error) {
      console.error(error);
      break; // If one chunk fails, stop uploading
    }
  }
};


Service CHUNKS- 

from fastapi import FastAPI, UploadFile, File, Form
from starlette.responses import JSONResponse
import os

app = FastAPI()

# Directory where chunks will be stored temporarily
TEMP_DIR = "temp_chunks"
if not os.path.exists(TEMP_DIR):
    os.makedirs(TEMP_DIR)

@app.post("/upload-chunk")
async def upload_chunk(
    file: UploadFile = File(...),
    chunk_index: int = Form(...),
    total_chunks: int = Form(...),
    networkUserId: str = Form(...),
    useruid: str = Form(...),
):
    chunk_filename = f"{networkUserId}_{useruid}_{chunk_index}"
    chunk_path = os.path.join(TEMP_DIR, chunk_filename)

    # Save the chunk to disk
    with open(chunk_path, "wb") as f:
        f.write(await file.read())

    # Check if all chunks have been uploaded
    if chunk_index + 1 == total_chunks:
        # Combine chunks into the final file
        final_filename = f"{networkUserId}_{useruid}_final_file"
        final_path = os.path.join("final_files", final_filename)
        
        with open(final_path, "wb") as final_file:
            for i in range(total_chunks):
                chunk_filename = f"{networkUserId}_{useruid}_{i}"
                chunk_path = os.path.join(TEMP_DIR, chunk_filename)
                with open(chunk_path, "rb") as chunk_file:
                    final_file.write(chunk_file.read())
                os.remove(chunk_path)  # Remove the chunk after combining

        return JSONResponse(content={"message": "File uploaded and combined successfully."}, status_code=200)

    return JSONResponse(content={"message": f"Chunk {chunk_index + 1} uploaded."}, status_code=200)